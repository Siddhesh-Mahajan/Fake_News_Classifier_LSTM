# -*- coding: utf-8 -*-
"""P3_Fake News Classifier LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/123lYNTVnzNc8VLMnuwdeoLGRsnVepOvq

**For Dataset**
(https://https://www.kaggle.com/c/fake-news/data#)
"""

import os
os.environ['KAGGLE_CONFIG_DIR'] = '/content'

!kaggle competitions download -c fake-news

!unzip \*.zip && rm *.zip

"""### Data Preprocessing"""

import pandas as pd
df = pd.read_csv('/content/train.csv')

df.head()

df = df.dropna()   # To drop nan values

# GEt independent Features

X = df.drop('label', axis=1)

## Get the dependent Features

y = df['label']

X.shape

y.shape

import tensorflow as tf
tf.__version__

import keras

from tensorflow.keras.layers import Embedding 
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing.text import one_hot
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dense

## Vocabulary size

voc_size = 5000

"""### Onehot Representation"""

messages = X.copy()          # For applying one_hot on independent features(title)

messages.reset_index(inplace = True)   # as we have dropped nan values

import nltk
import re
from nltk.corpus import stopwords

nltk.download('stopwords')

### Data Preprocessing

from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()
corpus = []
for i in range (0, len(messages)):     # 0, end of X.copy()
  print(i)                             # i = index
  review = re.sub('[^a-zA-Z]', ' ', messages['title'][i])   
  review = review.lower() 
  review = review.split()          # breaking down review into words 

  review = [ps.stem(word) for word in review if not word in stopwords.words('english')]  # if word not in stopwords apply porter stemmer
  review = ' '.join(review)  # combining words
  corpus.append(review)     # appending in corpus

corpus

onehot_repr = [one_hot(words, voc_size) for words in corpus]
onehot_repr

"""### Embedding Representation"""

sent_len = 20
embedded_docs = pad_sequences(onehot_repr, padding = 'pre', maxlen = sent_len)
print(embedded_docs)

embedded_docs[0]

### Creating model

embedding_vector_features = 40
model = Sequential()
model.add(Embedding(voc_size, embedding_vector_features, input_length = sent_len))

model.add(LSTM(100)) # One LSTM layer that has 100 neurons
model.add(Dense(1,activation='sigmoid')) # as classification problem
model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])
print(model.summary())

len(embedded_docs),y.shape

import numpy as np
X_final = np.array(embedded_docs)
y_final = np.array(y)

X_final.shape, y_final.shape

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_final, y_final, test_size=0.33, random_state=42)

"""### Model Training"""

model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=10, batch_size=64)

"""### Adding Dropout layer

### Performance Matrices and Accuracy
"""

y_pred = model.predict_classes(X_test)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test,y_pred)

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_pred)